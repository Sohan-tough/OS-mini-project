function generateTables() {
    let numProcesses = parseInt(document.getElementById("num-processes").value);
    let numResources = parseInt(document.getElementById("num-resources").value);

    let tablesContainer = document.getElementById("tables-container");
    tablesContainer.innerHTML = "";

    let tableNames = ["Max Matrix", "Allocated Matrix"];
    let tableIds = ["max-matrix", "alloc-matrix"];

    tableNames.forEach((name, index) => {
        let tableHTML = `<h3>${name}</h3><table id="${tableIds[index]}"><thead><tr><th>Process</th>`;
        for (let j = 0; j < numResources; j++) {
            tableHTML += `<th>R${j}</th>`;
        }
        tableHTML += `</tr></thead><tbody>`;

        for (let i = 0; i < numProcesses; i++) {
            tableHTML += `<tr><td>P${i}</td>`;
            for (let j = 0; j < numResources; j++) {
                tableHTML += `<td><input type="number" min="0" value="0"></td>`;
            }
            tableHTML += `</tr>`;
        }
        tableHTML += `</tbody></table>`;
        tablesContainer.innerHTML += tableHTML;
    });

    tablesContainer.innerHTML += `<h3>Initial Available Resources</h3>`;
    for (let j = 0; j < numResources; j++) {
        tablesContainer.innerHTML += `<input type="number" id="initial-resource-${j}" min="0" value="5"> `;
    }
}

let maxMatrix = [], allocMatrix = [], needMatrix = [];
let initialAvailable = [], available = [], processes = [];

function processInput() {
    maxMatrix = getMatrixValues("max-matrix");
    allocMatrix = getMatrixValues("alloc-matrix");
    let numProcesses = parseInt(document.getElementById("num-processes").value);
    let numResources = parseInt(document.getElementById("num-resources").value);

    processes = Array.from({ length: numProcesses }, (_, i) => "P" + i);

    initialAvailable = [];
    for (let j = 0; j < numResources; j++) {
        initialAvailable.push(parseInt(document.getElementById(`initial-resource-${j}`).value));
    }

    available = [...initialAvailable];
    for (let j = 0; j < available.length; j++) {
        available[j] -= allocMatrix.reduce((sum, row) => sum + row[j], 0);
    }

    needMatrix = maxMatrix.map((row, i) => row.map((maxVal, j) => maxVal - allocMatrix[i][j]));

    displayNeedMatrix();
    updateAvailableResources();
}

function getMatrixValues(tableId) {
    let table = document.getElementById(tableId);
    let rows = table.getElementsByTagName("tr");
    return Array.from(rows).slice(1).map(row =>
        Array.from(row.getElementsByTagName("td")).slice(1).map(cell =>
            parseInt(cell.getElementsByTagName("input")[0].value)
        )
    );
}

function displayNeedMatrix() {
    let tbody = document.querySelector("#need-matrix tbody");
    tbody.innerHTML = "";
    needMatrix.forEach((row, i) => {
        let tr = document.createElement("tr");
        tr.innerHTML = `<td>P${i}</td>` + row.map(val => `<td>${val}</td>`).join("");
        tbody.appendChild(tr);
    });
}

function updateAvailableResources() {
    document.getElementById("available-resources").innerHTML = "Available Resources: " + available.join(", ");
}

function startSimulation() {
    let checkingQueue = document.getElementById("checking");
    let safeSequenceQueue = document.getElementById("safe-sequence");
    let blockedQueue = document.getElementById("blocked");

    checkingQueue.innerHTML = "Checking Process: ";
    safeSequenceQueue.innerHTML = "Safe Sequence: ";
    blockedQueue.innerHTML = "Blocked Processes: ";

    let finish = new Array(processes.length).fill(false);
    let safeSequence = [];
    let work = [...available];
    let blockedProcesses = [];

    function checkProcess(index) {
        if (finish[index]) return;

        let proc = "P" + index;
        let checkingDiv = document.createElement("span");
        checkingDiv.textContent = proc;
        checkingQueue.appendChild(checkingDiv);

        let needCells = document.querySelectorAll(`#need-matrix tbody tr:nth-child(${index + 1}) td`);
        let canExecute = needMatrix[index].every((val, j) => {
            needCells[j + 1].style.backgroundColor = val <= work[j] ? "green" : "red";
            return val <= work[j];
        });

        setTimeout(() => {
            checkingQueue.removeChild(checkingDiv);

            if (canExecute) {
                work = work.map((val, j) => val + allocMatrix[index][j]);
                available = [...work];
                updateAvailableResources();

                let successDiv = document.createElement("span");
                successDiv.textContent = proc + " ";
                safeSequenceQueue.appendChild(successDiv);

                finish[index] = true;

                let blockedIndex = blockedProcesses.indexOf(index);
                if (blockedIndex !== -1) blockedProcesses.splice(blockedIndex, 1);

                recheckBlockedProcesses();
            } else {
                if (!blockedProcesses.includes(index)) {
                    let blockDiv = document.createElement("span");
                    blockDiv.textContent = proc + " ";
                    blockedQueue.appendChild(blockDiv);
                    blockedProcesses.push(index);
                }
                setTimeout(recheckBlockedProcesses, 1000);
            }
        }, 1000);
    }

    function recheckBlockedProcesses() {
        let rechecked = false;
        for (let i = 0; i < blockedProcesses.length; i++) {
            let index = blockedProcesses[i];
            if (needMatrix[index].every((val, j) => val <= work[j])) {
                blockedProcesses.splice(i, 1);
                checkProcess(index);
                rechecked = true;
                break;
            }
        }

        if (!rechecked) {
            for (let i = 0; i < processes.length; i++) {
                if (!finish[i]) {
                    checkProcess(i);
                    return;
                }
            }

            if (finish.every(val => val)) {
                alert("Simulation complete! Safe sequence: " + safeSequenceQueue.innerText);
            }
        }
    }

    function startNextProcess(index) {
        if (index < processes.length) {
            checkProcess(index);
            setTimeout(() => startNextProcess(index + 1), 1500);
        }
    }

    startNextProcess(0);
}
